{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","Cardlist","robotsLists","robots","map","robot","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","React","Component","ErrorBoundry","state","hasError","error","info","this","setState","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","console","log","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRbots","filter","toLowerCase","includes","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6903b4aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nconst Card = ({name, email, id}) => {\r\n    \r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({ robots }) => {\r\n    const robotsLists = robots.map(robot => {\r\n        return (\r\n            <Card \r\n                key={robot.id} \r\n                id={robot.id} \r\n                name={robot.name} \r\n                email={robot.email}/>\r\n        );\r\n    })\r\n    return (\r\n    <div>\r\n        {robotsLists}>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                onChange={searchChange}\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder='search robots'/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\nclass Header extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    render() {\r\n        return(\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          hasError: false\r\n      }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true});\r\n  }\r\n  render() {\r\n      if(this.state.hasError) {\r\n          return <h1>Ooops. Something went wrong</h1>\r\n      }\r\n      return this.props.children;\r\n  }  \r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Fragment, useEffect } from 'react';\r\nimport Cardlist from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\n\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport \"./App.css\";\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst App = (props) => {\r\n    \r\n    useEffect(() => {\r\n       props.onRequestRobots();\r\n    },[]);\r\n\r\n    console.log('props on render', props)\r\n    const { searchField, onSearchChange, robots, isPending } = props;\r\n    const filteredRbots = robots.filter( robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    \r\n\r\n    return isPending ? \r\n        <h1>Loading</h1>\r\n        :\r\n        (\r\n            <Fragment> \r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <Cardlist robots={filteredRbots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n    console.log('searching...');\r\n    return { \r\n        type:CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n};\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            return dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data})\r\n        })  \r\n        .catch(error => {\r\n           return dispatch({type: REQUEST_ROBOTS_FAILED, payload: error});\r\n        });\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({} ,state , {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;    \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}